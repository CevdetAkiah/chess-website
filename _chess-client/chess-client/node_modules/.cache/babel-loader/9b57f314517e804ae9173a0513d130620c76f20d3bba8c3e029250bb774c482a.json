{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar keys = require('./keys');\nvar hasBinary = require('has-binary');\nvar sliceBuffer = require('arraybuffer.slice');\nvar base64encoder = require('base64-arraybuffer');\nvar after = require('after');\nvar utf8 = require('utf8');\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = navigator.userAgent.match(/Android/i);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n  open: 0 // non-ws\n  ,\n  close: 1 // non-ws\n  ,\n  ping: 2,\n  pong: 3,\n  message: 4,\n  upgrade: 5,\n  noop: 6\n};\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = {\n  type: 'error',\n  data: 'parser error'\n};\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' == typeof supportsBinary) {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n  if ('function' == typeof utf8encode) {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n  return callback('' + encoded);\n};\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i + 1] = contentArray[i];\n  }\n  return callback(resultBuffer.buffer);\n}\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n  var fr = new FileReader();\n  fr.onload = function () {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function (packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function () {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  // String data\n  if (typeof data == 'string' || data === undefined) {\n    if (data.charAt(0) == 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n    if (utf8decode) {\n      try {\n        data = utf8.decode(data);\n      } catch (e) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n    if (data.length > 1) {\n      return {\n        type: packetslist[type],\n        data: data.substring(1)\n      };\n    } else {\n      return {\n        type: packetslist[type]\n      };\n    }\n  }\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return {\n    type: packetslist[type],\n    data: rest\n  };\n};\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function (msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!global.ArrayBuffer) {\n    return {\n      type: type,\n      data: {\n        base64: true,\n        data: msg.substr(1)\n      }\n    };\n  }\n  var data = base64encoder.decode(msg.substr(1));\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n  return {\n    type: type,\n    data: data\n  };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary == 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n  var isBinary = hasBinary(packets);\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n  if (!packets.length) {\n    return callback('0:');\n  }\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n  map(packets, encodeOne, function (err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n  var eachWithIndex = function (i, el, cb) {\n    each(el, function (error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data != 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n  var packet;\n  if (data == '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n  var length = '',\n    n,\n    msg;\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n    if (':' != chr) {\n      length += chr;\n    } else {\n      if ('' == length || length != (n = Number(length))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n      msg = data.substr(i + 1, n);\n      if (length != msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n      if (msg.length) {\n        packet = exports.decodePacket(msg, binaryType, true);\n        if (err.type == packet.type && err.data == packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n        var ret = callback(packet, i + n, l);\n        if (false === ret) return;\n      }\n\n      // advance cursor\n      i += n;\n      length = '';\n    }\n  }\n  if (length != '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function (packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function (data) {\n      return doneCallback(null, data);\n    });\n  }\n  map(packets, encodeOne, function (err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function (acc, p) {\n      var len;\n      if (typeof p === 'string') {\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n    var resultArray = new Uint8Array(totalLength);\n    var bufferIndex = 0;\n    encodedPackets.forEach(function (p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n      if (isString) {\n        // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else {\n        // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function (packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function (encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n  map(packets, encodeOne, function (err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n  var bufferTail = data;\n  var buffers = [];\n  var numberTooLong = false;\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n    for (var i = 1;; i++) {\n      if (tailArray[i] == 255) break;\n      if (msgLength.length > 310) {\n        numberTooLong = true;\n        break;\n      }\n      msgLength += tailArray[i];\n    }\n    if (numberTooLong) return callback(err, 0, 1);\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n  var total = buffers.length;\n  buffers.forEach(function (buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};","map":{"version":3,"names":["keys","require","hasBinary","sliceBuffer","base64encoder","after","utf8","isAndroid","navigator","userAgent","match","isPhantomJS","test","dontSendBlobs","exports","protocol","packets","open","close","ping","pong","message","upgrade","noop","packetslist","err","type","data","Blob","encodePacket","packet","supportsBinary","utf8encode","callback","undefined","buffer","global","ArrayBuffer","encodeArrayBuffer","encodeBlob","base64","encodeBase64Object","encoded","encode","String","encodeBase64Packet","contentArray","Uint8Array","resultBuffer","byteLength","i","length","encodeBlobAsArrayBuffer","fr","FileReader","onload","result","readAsArrayBuffer","blob","b64","split","readAsDataURL","b64data","fromCharCode","apply","e","typed","basic","Array","btoa","decodePacket","binaryType","utf8decode","charAt","decodeBase64Packet","substr","decode","Number","substring","asArray","rest","msg","encodePayload","isBinary","encodePayloadAsBlob","encodePayloadAsArrayBuffer","setLengthHeader","encodeOne","doneCallback","map","results","join","ary","each","done","next","eachWithIndex","el","cb","error","decodePayload","decodePayloadAsBinary","n","l","chr","ret","encodedPackets","totalLength","reduce","acc","p","len","toString","resultArray","bufferIndex","forEach","isString","ab","view","charCodeAt","lenStr","parseInt","binaryIdentifier","size","lengthAry","bufferTail","buffers","numberTooLong","tailArray","msgLength","push","total"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/node_modules/engine.io-parser/lib/browser.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar keys = require('./keys');\nvar hasBinary = require('has-binary');\nvar sliceBuffer = require('arraybuffer.slice');\nvar base64encoder = require('base64-arraybuffer');\nvar after = require('after');\nvar utf8 = require('utf8');\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = navigator.userAgent.match(/Android/i);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' == typeof supportsBinary) {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if ('function' == typeof utf8encode) {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  // String data\n  if (typeof data == 'string' || data === undefined) {\n    if (data.charAt(0) == 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      try {\n        data = utf8.decode(data);\n      } catch (e) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!global.ArrayBuffer) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary == 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data != 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data == '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = ''\n    , n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (':' != chr) {\n      length += chr;\n    } else {\n      if ('' == length || (length != (n = Number(length)))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      msg = data.substr(i + 1, n);\n\n      if (length != msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      if (msg.length) {\n        packet = exports.decodePacket(msg, binaryType, true);\n\n        if (err.type == packet.type && err.data == packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n\n        var ret = callback(packet, i + n, l);\n        if (false === ret) return;\n      }\n\n      // advance cursor\n      i += n;\n      length = '';\n    }\n  }\n\n  if (length != '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  var numberTooLong = false;\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] == 255) break;\n\n      if (msgLength.length > 310) {\n        numberTooLong = true;\n        break;\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    if(numberTooLong) return callback(err, 0, 1);\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}