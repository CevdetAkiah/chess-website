{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport './game.css';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { setMessage, setOpponent, setOpponentColour, setOpponentMoves, setPlayer, setPlayerColour, types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport GameOver from '../../components/gameover';\nimport UserForm from '../../components/userform';\n\n// import io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverURL = 'ws://localhost:8080/ws';\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst ws = new WebSocket(serverURL);\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n  const {\n    possibleMoves,\n    dispatch,\n    message,\n    playerColour,\n    opponentColour,\n    playerName,\n    opponentName\n  } = useContext(GameContext);\n  useEffect(() => {\n    ws.onopen = event => {\n      console.log(\"connection established: \", event);\n      const apiRequest = {\n        emit: \"join\",\n        user: {\n          name: \"John\"\n        }\n      };\n      ws.send(JSON.stringify(apiRequest));\n    };\n    ws.onerror = err => {\n      console.log(err);\n    };\n    ws.onmessage = event => {\n      const msgReceived = JSON.parse(event.data);\n      const emit = msgReceived.emit;\n      switch (emit) {\n        case 'message':\n          console.log(msgReceived.message);\n          break;\n        case 'playerJoined':\n          console.log(msgReceived.message);\n          dispatch(setPlayer(msgReceived.playerName));\n          dispatch(setPlayerColour(msgReceived.playerColour));\n          break;\n        case 'opponentJoined':\n          console.log(msgReceived.message);\n          dispatch(setOpponent(msgReceived.opponentName));\n          dispatch(setOpponentColour(msgReceived.opponentColour));\n          break;\n        case 'opponentMove':\n          const from = msgReceived.from;\n          const to = msgReceived.to;\n          chess.move({\n            from,\n            to\n          });\n          setFen(chess.fen()); // update the fen with the new move/piece positions\n          dispatch(setOpponentMoves([from, to]));\n          break;\n        default:\n      }\n      ;\n    };\n    ws.onclose = event => {\n      console.log(\"connection closed: \", event);\n    };\n  }, [dispatch, chess]);\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    if (opponentName == '') {\n      return;\n    }\n    ;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n      const apiRequest = {\n        emit: \"move\",\n        gameID: 1,\n        from: from,\n        to: to\n      };\n      ws.send(JSON.stringify(apiRequest));\n      dispatch({\n        type: types.CLEAR_POSSIBLE_MOVES\n      }); // unhighlight possible moves\n      setFen(chess.fen()); // update the fen with the new move/piece positions\n    }\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  // if (gameOver) {\n  //     return <GameOver />\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 13\n  }, this);\n};\n_s(Game, \"tWC7h5iOIdra40GwNm6V7OOrLS4=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","setMessage","setOpponent","setOpponentColour","setOpponentMoves","setPlayer","setPlayerColour","types","getGameOverState","GameOver","UserForm","jsxDEV","_jsxDEV","serverURL","FEN","ws","WebSocket","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","possibleMoves","dispatch","message","playerColour","opponentColour","playerName","opponentName","onopen","event","console","log","apiRequest","emit","user","name","send","JSON","stringify","onerror","err","onmessage","msgReceived","parse","data","from","to","move","onclose","status","type","GAME_OVER","player","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","validMove","includes","gameID","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","className","children","cells","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport './game.css';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport {     \n    setMessage,\n    setOpponent,\n    setOpponentColour,\n    setOpponentMoves,\n    setPlayer,\n    setPlayerColour,\n    types, } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport  GameOver from '../../components/gameover';\nimport UserForm from '../../components/userform';\n\n// import io from 'socket.io-client';\nconst serverURL = 'ws://localhost:8080/ws'\n\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst ws = new WebSocket(serverURL)\n\n\n\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n    const { possibleMoves, dispatch, message, playerColour, opponentColour, playerName, opponentName } = useContext(GameContext);\n\n    useEffect(() => {\n        ws.onopen = (event) =>{\n            console.log(\"connection established: \", event)\n            \n            const apiRequest = {emit: \"join\", user : {name : \"John\"}}\n            ws.send(JSON.stringify(apiRequest)) \n        }\n        ws.onerror = (err) => {\n            console.log(err)\n        }\n\n        ws.onmessage = (event) => {\n            const msgReceived = JSON.parse(event.data)\n            const emit = msgReceived.emit\n            switch (emit) {\n                case 'message':\n                    console.log(msgReceived.message) \n                    break;\n                case 'playerJoined':\n                    console.log(msgReceived.message)\n                    dispatch(setPlayer(msgReceived.playerName))\n                    dispatch(setPlayerColour(msgReceived.playerColour))\n                    break;\n                case 'opponentJoined':\n                    console.log(msgReceived.message)\n                    dispatch(setOpponent(msgReceived.opponentName))\n                    dispatch(setOpponentColour(msgReceived.opponentColour))\n                    break;\n                case 'opponentMove':\n                    const from = msgReceived.from\n                    const to = msgReceived.to\n                    chess.move({ from, to })\n                    setFen(chess.fen()); // update the fen with the new move/piece positions\n                    dispatch(setOpponentMoves([from,to]))\n                    break;\n                default:\n                };\n            }\n\n            \n\n        ws.onclose = (event) => {\n            console.log(\"connection closed: \", event)\n        }\n    },[dispatch, chess]);\n\n\n\n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */ \n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n        if (opponentName == ''){\n            return\n        };\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n            const apiRequest = {emit: \"move\", gameID: 1, from: from, to: to }\n            ws.send(JSON.stringify(apiRequest))\n            dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n            setFen(chess.fen()); // update the fen with the new move/piece positions\n        }\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    };\n\n    // if (gameOver) {\n    //     return <GameOver />\n    // };\n\n    return (\n            <div className=\"game\">\n            <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n            </div>\n    );\n\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}