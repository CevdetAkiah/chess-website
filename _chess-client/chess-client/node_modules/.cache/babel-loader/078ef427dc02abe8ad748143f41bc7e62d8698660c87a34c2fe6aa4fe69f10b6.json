{"ast":null,"code":"import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = moves => {\n  return moves.map(move => {\n    const n = move.length;\n    // console.log(moves)\n    // if (move ===\"O-O\" && moves.includes(\"Kf1\")){\n    //     return \"g1\"\n    // } else if (moves === \"O-O-O\" && moves.includes(\"Kd1\")){\n    //     return \"c1\"\n    // }\n    const [position, castling] = checkCastling(move, moves);\n    if (castling) {\n      return position;\n    }\n    if (move.substring(n - 1) === '+') {\n      // if a move results in check\n      return move.substring(n - 3, n - 1);\n    }\n    return move.substring(n - 2);\n  });\n};\nconst checkCastling = (move, moves) => {\n  if (move === \"O-O\" && moves.includes(\"Kf1\")) {\n    return [\"g1\", true];\n  } else if (moves === \"O-O-O\" && moves.includes(\"Kd1\")) {\n    return [\"c1\", true];\n  }\n  switch (move) {\n    case \"O-O\":\n      if (moves.includes(\"Kf1\")) {\n        return [\"g1\", true];\n      }\n      if (moves.includes(\"Kf8\")) {\n        return [\"g8\", true];\n      }\n    case \"O-O-O\":\n      if (moves.includes(\"Kd1\")) {\n        return [\"c1\", true];\n      }\n      if (moves.includes(\"Kd8\")) {\n        return [\"c8\", true];\n      }\n  }\n  return [null, false];\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_POSSIBLE_MOVES:\n      // highlight possible cells to move to\n      return {\n        ...state,\n        possibleMoves: getPositions(action.moves)\n      };\n    case types.CLEAR_POSSIBLE_MOVES:\n      // unhighlight cells\n      return {\n        ...state,\n        possibleMoves: []\n      };\n    case types.SET_TURN:\n      return {\n        ...state,\n        turn: action.player,\n        check: action.check\n      };\n    default:\n      return state;\n  }\n};\n_c = GameReducer;\nexport default GameReducer;\nvar _c;\n$RefreshReg$(_c, \"GameReducer\");","map":{"version":3,"names":["types","getPositions","moves","map","move","n","length","position","castling","checkCastling","substring","includes","GameReducer","state","action","type","SET_POSSIBLE_MOVES","possibleMoves","CLEAR_POSSIBLE_MOVES","SET_TURN","turn","player","check","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-app/src/context/GameReducer.js"],"sourcesContent":["import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = (moves) => {\n    return moves.map((move) => {\n        const n = move.length;\n        // console.log(moves)\n        // if (move ===\"O-O\" && moves.includes(\"Kf1\")){\n        //     return \"g1\"\n        // } else if (moves === \"O-O-O\" && moves.includes(\"Kd1\")){\n        //     return \"c1\"\n        // }\n       const [position, castling] = checkCastling(move,moves)\n       if (castling){\n        return position\n       }\n         if (move.substring(n-1) === '+'){ // if a move results in check\n            return move.substring(n-3, n-1)\n        } \n        return move.substring(n-2)\n    });\n};\n\nconst checkCastling = (move, moves) => {\n    if (move ===\"O-O\" && moves.includes(\"Kf1\")){\n        return [\"g1\" , true]\n    } else if (moves === \"O-O-O\" && moves.includes(\"Kd1\")){\n        return [\"c1\",true]\n    } \n\n    switch (move) {\n        case \"O-O\":\n            if (moves.includes(\"Kf1\")){\n                return [\"g1\", true]\n            }\n            if (moves.includes(\"Kf8\")){\n                return [\"g8\",true]\n            }\n        case \"O-O-O\":\n            if (moves.includes(\"Kd1\")){\n                return [\"c1\",true]\n            }\n            if (moves.includes(\"Kd8\")){\n                return [\"c8\",true]\n            }\n    }\n\n    return [null,false]\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) =>{\n    switch (action.type) {\n        case types.SET_POSSIBLE_MOVES: // highlight possible cells to move to\n            return {\n                ...state,\n                possibleMoves: getPositions(action.moves),\n            };\n            case types.CLEAR_POSSIBLE_MOVES: // unhighlight cells\n                return {\n                    ...state,\n                    possibleMoves: [],\n                };\n            case types.SET_TURN:\n                return {\n                    ...state,\n                    turn: action.player,\n                    check: action.check,\n                };\n            default:\n                return state;\n    }\n};\n\nexport default GameReducer;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;;AAEjC;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC5B,OAAOA,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;IACvB,MAAMC,CAAC,GAAGD,IAAI,CAACE,MAAM;IACrB;IACA;IACA;IACA;IACA;IACA;IACD,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGC,aAAa,CAACL,IAAI,EAACF,KAAK,CAAC;IACtD,IAAIM,QAAQ,EAAC;MACZ,OAAOD,QAAQ;IAChB;IACE,IAAIH,IAAI,CAACM,SAAS,CAACL,CAAC,GAAC,CAAC,CAAC,KAAK,GAAG,EAAC;MAAE;MAC/B,OAAOD,IAAI,CAACM,SAAS,CAACL,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,CAAC;IACnC;IACA,OAAOD,IAAI,CAACM,SAAS,CAACL,CAAC,GAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC;AAED,MAAMI,aAAa,GAAGA,CAACL,IAAI,EAAEF,KAAK,KAAK;EACnC,IAAIE,IAAI,KAAI,KAAK,IAAIF,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAC;IACvC,OAAO,CAAC,IAAI,EAAG,IAAI,CAAC;EACxB,CAAC,MAAM,IAAIT,KAAK,KAAK,OAAO,IAAIA,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAC;IAClD,OAAO,CAAC,IAAI,EAAC,IAAI,CAAC;EACtB;EAEA,QAAQP,IAAI;IACR,KAAK,KAAK;MACN,IAAIF,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAC;QACtB,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;MACvB;MACA,IAAIT,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAC;QACtB,OAAO,CAAC,IAAI,EAAC,IAAI,CAAC;MACtB;IACJ,KAAK,OAAO;MACR,IAAIT,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAC;QACtB,OAAO,CAAC,IAAI,EAAC,IAAI,CAAC;MACtB;MACA,IAAIT,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAC;QACtB,OAAO,CAAC,IAAI,EAAC,IAAI,CAAC;MACtB;EACR;EAEA,OAAO,CAAC,IAAI,EAAC,KAAK,CAAC;AACvB,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAI;EAClC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKf,KAAK,CAACgB,kBAAkB;MAAE;MAC3B,OAAO;QACH,GAAGH,KAAK;QACRI,aAAa,EAAEhB,YAAY,CAACa,MAAM,CAACZ,KAAK;MAC5C,CAAC;IACD,KAAKF,KAAK,CAACkB,oBAAoB;MAAE;MAC7B,OAAO;QACH,GAAGL,KAAK;QACRI,aAAa,EAAE;MACnB,CAAC;IACL,KAAKjB,KAAK,CAACmB,QAAQ;MACf,OAAO;QACH,GAAGN,KAAK;QACRO,IAAI,EAAEN,MAAM,CAACO,MAAM;QACnBC,KAAK,EAAER,MAAM,CAACQ;MAClB,CAAC;IACL;MACI,OAAOT,KAAK;EACxB;AACJ,CAAC;AAACU,EAAA,GArBIX,WAAW;AAuBjB,eAAeA,WAAW;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}