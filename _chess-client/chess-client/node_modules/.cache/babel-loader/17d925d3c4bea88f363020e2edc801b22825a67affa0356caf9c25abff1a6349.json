{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/react-chess/chess-client/src/components/cell/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { isLightSquare, Cell as BoardCell } from '../../functions/';\nimport PropTypes from 'prop-types';\nimport Piece from '../piece';\nimport { GameContext } from '../../context/GameContext';\nimport './cell-styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = ({\n  cell,\n  index,\n  makeMove,\n  setFromPos\n}) => {\n  _s();\n  const light = isLightSquare(cell.pos, index); /**returns true if cell should be light */\n  const {\n    possibleMoves,\n    turn,\n    check,\n    playerColour\n  } = useContext(GameContext);\n  const renderContent = () => {\n    if (turn === playerColour) {\n      const isPossibleMove = possibleMoves.includes(cell.pos); // check if this cell's position is a possible move\n      const colour = cell.piece.toUpperCase() === cell.piece ? 'w' : 'b';\n      // TODO: inCheck is returning false when it shouldn't\n      const inCheck = () => {\n        const king = cell.piece.toUpperCase === 'K';\n        return turn === colour && king && check; // return true if the turn is the colour of current player and the piece is a king and in check (according to Chess.js)\n      };\n\n      const handleDrop = () => {\n        console.log(\"turn: \", turn);\n        console.log(\"playercolour: \", playerColour);\n        if (turn === playerColour) {\n          makeMove(cell.pos);\n        }\n      };\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `cell ${light ? 'light' : 'dark'}`,\n      onDrop: handleDrop,\n      onDragOver: e => e.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `overlay ${isPossibleMove && 'possible-move'} ${inCheck() && 'check'}`,\n        children: /*#__PURE__*/_jsxDEV(Piece, {\n          name: cell.piece,\n          pos: cell.pos,\n          setFromPos: setFromPos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 6\n    }, this);\n  };\n};\n_s(Cell, \"WgWFZBoHs/jEeJQaf2lgnbjWMuc=\");\n_c = Cell;\nCell.prototype = {\n  cell: PropTypes.instanceOf(BoardCell).isRequired,\n  index: PropTypes.number.isRequired,\n  makeMove: PropTypes.func,\n  setFromPos: PropTypes.func\n};\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","useContext","isLightSquare","Cell","BoardCell","PropTypes","Piece","GameContext","jsxDEV","_jsxDEV","cell","index","makeMove","setFromPos","_s","light","pos","possibleMoves","turn","check","playerColour","renderContent","isPossibleMove","includes","colour","piece","toUpperCase","inCheck","king","handleDrop","console","log","className","onDrop","onDragOver","e","preventDefault","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","prototype","instanceOf","isRequired","number","func","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-client/src/components/cell/index.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { isLightSquare, Cell as BoardCell } from '../../functions/';\nimport PropTypes from 'prop-types';\nimport Piece from'../piece';\nimport { GameContext } from '../../context/GameContext';\nimport './cell-styles.css';\n\nconst Cell = ( {cell, index, makeMove, setFromPos} ) => {\n    const light = isLightSquare(cell.pos, index); /**returns true if cell should be light */\n    const { possibleMoves, turn, check, playerColour } = useContext(GameContext); \n\n    const renderContent = () => {\n        if (turn === playerColour) {\n            const isPossibleMove = possibleMoves.includes(cell.pos); // check if this cell's position is a possible move\n            const colour = cell.piece.toUpperCase() === cell.piece ? 'w' : 'b';\n        // TODO: inCheck is returning false when it shouldn't\n        const inCheck = () => {\n            const king = cell.piece.toUpperCase === 'K';\n            return turn === colour && king && check; // return true if the turn is the colour of current player and the piece is a king and in check (according to Chess.js)\n        }\n\n        const handleDrop = () => {\n            console.log(\"turn: \",turn)\n            console.log(\"playercolour: \", playerColour)\n            if (turn === playerColour){\n                makeMove(cell.pos);\n            }\n        };\n        }\n\nreturn ( \n     <div\n         className={`cell ${light ? 'light' : 'dark'}`}\n        onDrop={handleDrop}\n        onDragOver={(e) => e.preventDefault()}\n     >\n        <div className={`overlay ${isPossibleMove && 'possible-move'} ${ inCheck() && 'check' }`}>\n             <Piece name={cell.piece} pos={cell.pos}  setFromPos={setFromPos} />\n        </div>\n     </div>\n);\n    }\n\n\n        \n};\n\nCell.prototype = {\n    cell: PropTypes.instanceOf(BoardCell).isRequired,\n    index: PropTypes.number.isRequired,\n    makeMove: PropTypes.func,\n    setFromPos: PropTypes.func,\n}\n\nexport default Cell;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}