{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/react-chess/chess-app/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport { GameOver } from '../../components/gameover';\n\n// const FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n  const {\n    possibleMoves,\n    dispatch\n  } = useContext(GameContext);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n    }\n    dispatch({\n      type: types.CLEAR_POSSIBLE_MOVES\n    }); // unhighlight possible moves\n    setFen(chess.fen()); // update the fen with the new move/piece positions\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  if (gameOver) {\n    return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 12\n  }, this);\n};\n_s(Game, \"gLTu7zLOr0e/jkXwiPqE6mzBRRk=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","types","getGameOverState","GameOver","jsxDEV","_jsxDEV","FEN","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","possibleMoves","dispatch","status","type","GAME_OVER","player","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","from","to","validMove","includes","move","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","fileName","_jsxFileName","lineNumber","columnNumber","className","children","cells","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-app/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport { GameOver } from '../../components/gameover';\n\n// const FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate\nconst FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n\n   \n \n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n    const { possibleMoves, dispatch } = useContext(GameContext);\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */\n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n        }\n        dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n        setFen(chess.fen()); // update the fen with the new move/piece positions\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    }\n\n    if (gameOver) {\n        return <GameOver />\n    }\n    return <div className=\"game\">\n        <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n    </div>\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}