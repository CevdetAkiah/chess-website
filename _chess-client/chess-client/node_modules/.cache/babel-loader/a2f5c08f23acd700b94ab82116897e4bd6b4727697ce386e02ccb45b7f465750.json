{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar Transport = require('../transport');\nvar parseqs = require('parseqs');\nvar parser = require('engine.io-parser');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = function () {\n  var XMLHttpRequest = require('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling(opts) {\n  var forceBase64 = opts && opts.forceBase64;\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var pending = 0;\n  var self = this;\n  this.readyState = 'pausing';\n  function pause() {\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n  if (this.polling || !this.writable) {\n    var total = 0;\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function () {\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function () {\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' == self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' == packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' != this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n    if ('open' == this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n  function close() {\n    debug('writing close packet');\n    self.write([{\n      type: 'close'\n    }]);\n  }\n  if ('open' == this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n  var self = this;\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && ('https' == schema && this.port != 443 || 'http' == schema && this.port != 80)) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};","map":{"version":3,"names":["Transport","require","parseqs","parser","inherit","yeast","debug","module","exports","Polling","hasXHR2","XMLHttpRequest","xhr","xdomain","responseType","opts","forceBase64","supportsBinary","call","prototype","name","doOpen","poll","pause","onPause","pending","self","readyState","polling","writable","total","once","doPoll","emit","onData","data","callback","packet","index","onOpen","type","onClose","onPacket","decodePayload","socket","binaryType","doClose","close","write","packets","callbackfn","encodePayload","doWrite","uri","query","schema","secure","port","timestampRequests","timestampParam","sid","b64","encode","length","ipv6","hostname","indexOf","path"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/node_modules/engine.io-client/lib/transports/polling.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Transport = require('../transport');\nvar parseqs = require('parseqs');\nvar parser = require('engine.io-parser');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function() {\n  var XMLHttpRequest = require('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling(opts){\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function(){\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function(onPause){\n  var pending = 0;\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause(){\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function(){\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function(){\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function(){\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function(data){\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function(packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' == self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' == packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' != this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' == this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function(){\n  var self = this;\n\n  function close(){\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' == this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function(packets){\n  var self = this;\n  this.writable = false;\n  var callbackfn = function() {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  var self = this;\n  parser.encodePayload(packets, this.supportsBinary, function(data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function(){\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' == schema && this.port != 443) ||\n     ('http' == schema && this.port != 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}