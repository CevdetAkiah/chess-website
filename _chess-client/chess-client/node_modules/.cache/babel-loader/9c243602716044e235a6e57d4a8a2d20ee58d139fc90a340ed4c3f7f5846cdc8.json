{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/react-chess/chess-client/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { setMessage, setOpponent, setOpponentMoves, setPlayer, setPlayerColor, types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport GameOver from '../../components/gameover';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('localhost:5000', {\n  transports: ['websocket']\n});\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n  const {\n    possibleMoves,\n    dispatch\n  } = useContext(GameContext);\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n\n  // listening for events from the server\n\n  useEffect(() => {\n    socket.on('connect_error', error => {\n      console.log('Websocket connection error: ', error);\n    });\n    socket.emit('join', {\n      name: 'Frank',\n      gameID: '20'\n    }, ({\n      error,\n      player\n    }) => {\n      console.log({\n        player\n      });\n      if (error) {\n        console.log(error);\n      }\n      dispatch(setPlayer(player.name));\n    });\n    socket.on('welcome', ({\n      message,\n      opponent\n    }) => {\n      console.log({\n        message,\n        opponent\n      });\n    });\n    socket.on('opponentJoin', ({\n      message,\n      opponent\n    }) => {\n      console.log({\n        message,\n        opponent\n      });\n    });\n    socket.on('opponentLeft', ({\n      message\n    }) => {\n      console.log(message);\n    });\n    socket.on('opponentMove', ({\n      from,\n      to\n    }) => {\n      chess.move({\n        from,\n        to\n      });\n      setFen(chess.fen());\n    });\n    socket.on('message', ({\n      message\n    }) => {\n      console.log(message);\n    });\n  }, [chess]);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n      socket.emit('move', {\n        gameID: '20',\n        from,\n        to\n      }); // send moves to the other player through the websocket\n      dispatch({\n        type: types.CLEAR_POSSIBLE_MOVES\n      }); // unhighlight possible moves\n      setFen(chess.fen()); // update the fen with the new move/piece positions\n    }\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  if (gameOver) {\n    return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this);\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 13\n  }, this);\n};\n_s(Game, \"NoDznaP8jUE1UDA7FTg2kNmBGDY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","setMessage","setOpponent","setOpponentMoves","setPlayer","setPlayerColor","types","getGameOverState","GameOver","io","jsxDEV","_jsxDEV","socket","transports","FEN","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","possibleMoves","dispatch","on","error","console","log","emit","name","gameID","player","message","opponent","from","to","move","status","type","GAME_OVER","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","validMove","includes","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","fileName","_jsxFileName","lineNumber","columnNumber","className","children","cells","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-client/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport {     \n    setMessage,\n    setOpponent,\n    setOpponentMoves,\n    setPlayer,\n    setPlayerColor,\n    types, } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport  GameOver from '../../components/gameover';\nimport io from 'socket.io-client';\n\n\nconst socket = io('localhost:5000', {\n    transports: ['websocket']\n});\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n    const { possibleMoves, dispatch } = useContext(GameContext);\n\n\n \n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n\n        \n    // listening for events from the server\n\n    useEffect(() => {\n        socket.on('connect_error', (error) => {\n            console.log('Websocket connection error: ', error)\n        });\n\n            socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, player }) => {\n                console.log({ player });\n                if (error){\n                    console.log(error)\n                }\n                dispatch(setPlayer(player.name));\n            });\n\n\n        socket.on('welcome', ({ message, opponent }) => {\n            console.log({ message, opponent });\n        });\n        socket.on('opponentJoin', ({ message, opponent }) => {\n            console.log({ message, opponent });\n        });\n        socket.on('opponentLeft', ({ message }) => {\n            console.log(message)\n        });\n    \n        socket.on('opponentMove', ({ from, to }) => {\n            chess.move({ from, to });\n            setFen(chess.fen());\n        });\n        socket.on('message',({ message })=> {\n            console.log(message)\n        });\n\n}, [chess]);\n\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */\n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n            socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n            dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n            setFen(chess.fen()); // update the fen with the new move/piece positions\n        }\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    };\n\n\n\n\n\n\n    if (gameOver) {\n        return <GameOver />\n    };\n\n    return (\n            <div className=\"game\">\n            <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n            </div>\n        );\n\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}