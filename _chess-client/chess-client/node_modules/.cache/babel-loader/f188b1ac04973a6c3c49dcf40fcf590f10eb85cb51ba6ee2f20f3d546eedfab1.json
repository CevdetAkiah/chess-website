{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport './game.css';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { setMessage, setOpponent, setOpponentColour, setOpponentMoves, setPlayer, setPlayerColour, types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport GameOver from '../../components/gameover';\nimport UserForm from '../../components/userform';\nimport useWebSocket from 'react-use-websocket';\n// import io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverURL = 'wss://localhost:8080/ws';\n\n// const socket = io('localhost:8080/socket.io/', {\n//     transports: ['websocket']\n// });\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n  const {\n    possibleMoves,\n    dispatch\n  } = useContext(GameContext);\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n  try {\n    const {\n      sendMessage,\n      sendJsonMessage,\n      lastMessage,\n      lastJsonMessage,\n      readyState,\n      getWebSocket\n    } = useWebSocket(serverURL, {\n      // onOpen: () => console.log('opened'),\n      // shouldReconnect: (closeEvent) => true,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  // listening for events from the server\n\n  //     useEffect(() => {\n  //         socket.on('connect_error', (error) => {\n  //             console.log('Websocket connection error: ', error)\n  //         });\n\n  //             socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, name, colour }) => {\n  //                 if (error){\n  //                     console.log(error)\n  //                 }\n  //                 dispatch(setPlayer(name));\n  //                 dispatch(setPlayerColour(colour))\n  //             });\n\n  //         socket.on('welcome', ({ message, opponent }) => {\n  //             dispatch(setMessage(message));\n  //             dispatch(setOpponent(opponent));\n  //         });\n  //         socket.on('opponentJoin', ({ message, opponent }) => {\n  //             dispatch(setMessage(message));\n  //             dispatch(setOpponent(opponent));\n  //             dispatch(setOpponentColour(opponent.colour));\n  //         });\n  //         socket.on('opponentLeft', ({ message }) => {\n  //             console.log(message)\n  //         });\n\n  //         socket.on('opponentMove', ({ from, to }) => {\n  //             chess.move({ from, to });\n  //             setFen(chess.fen());\n  //             dispatch(setMessage('Your Turn'));\n  //             dispatch(setOpponentMoves([from, to]));\n  //         });\n  //         socket.on('message',({ message })=> {\n  //             console.log(message)\n  //         });\n\n  // }, [chess, dispatch]);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n      // socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n      dispatch({\n        type: types.CLEAR_POSSIBLE_MOVES\n      }); // unhighlight possible moves\n      setFen(chess.fen()); // update the fen with the new move/piece positions\n    }\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  // if (gameOver) {\n  //     return <GameOver />\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 13\n  }, this);\n};\n_s(Game, \"+MjvZ7/NkrUBynT6G04JcS5sSUg=\", false, function () {\n  return [useWebSocket];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","setMessage","setOpponent","setOpponentColour","setOpponentMoves","setPlayer","setPlayerColour","types","getGameOverState","GameOver","UserForm","useWebSocket","jsxDEV","_jsxDEV","serverURL","FEN","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","possibleMoves","dispatch","sendMessage","sendJsonMessage","lastMessage","lastJsonMessage","readyState","getWebSocket","error","console","log","status","type","GAME_OVER","player","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","from","to","validMove","includes","move","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","className","children","cells","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport './game.css';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport {     \n    setMessage,\n    setOpponent,\n    setOpponentColour,\n    setOpponentMoves,\n    setPlayer,\n    setPlayerColour,\n    types, } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport  GameOver from '../../components/gameover';\nimport UserForm from '../../components/userform';\nimport useWebSocket from 'react-use-websocket'\n// import io from 'socket.io-client';\nconst serverURL = 'wss://localhost:8080/ws'\n\n\n\n// const socket = io('localhost:8080/socket.io/', {\n//     transports: ['websocket']\n// });\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n    const { possibleMoves, dispatch } = useContext(GameContext);\n \n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n    try{\n    const {\n        sendMessage,\n        sendJsonMessage,\n        lastMessage,\n        lastJsonMessage,\n        readyState,\n        getWebSocket,\n    } = useWebSocket(serverURL, {\n        // onOpen: () => console.log('opened'),\n        // shouldReconnect: (closeEvent) => true,\n    });\n}catch(error){\n    console.log(error)\n}\n\n     \n    // listening for events from the server\n\n//     useEffect(() => {\n//         socket.on('connect_error', (error) => {\n//             console.log('Websocket connection error: ', error)\n//         });\n\n//             socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, name, colour }) => {\n//                 if (error){\n//                     console.log(error)\n//                 }\n//                 dispatch(setPlayer(name));\n//                 dispatch(setPlayerColour(colour))\n//             });\n\n\n//         socket.on('welcome', ({ message, opponent }) => {\n//             dispatch(setMessage(message));\n//             dispatch(setOpponent(opponent));\n//         });\n//         socket.on('opponentJoin', ({ message, opponent }) => {\n//             dispatch(setMessage(message));\n//             dispatch(setOpponent(opponent));\n//             dispatch(setOpponentColour(opponent.colour));\n//         });\n//         socket.on('opponentLeft', ({ message }) => {\n//             console.log(message)\n//         });\n    \n//         socket.on('opponentMove', ({ from, to }) => {\n//             chess.move({ from, to });\n//             setFen(chess.fen());\n//             dispatch(setMessage('Your Turn'));\n//             dispatch(setOpponentMoves([from, to]));\n//         });\n//         socket.on('message',({ message })=> {\n//             console.log(message)\n//         });\n\n// }, [chess, dispatch]);\n\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */\n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n            // socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n            dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n            setFen(chess.fen()); // update the fen with the new move/piece positions\n        }\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    };\n\n    // if (gameOver) {\n    //     return <GameOver />\n    // };\n\n    return (\n            <div className=\"game\">\n            <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n            </div>\n    );\n\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}