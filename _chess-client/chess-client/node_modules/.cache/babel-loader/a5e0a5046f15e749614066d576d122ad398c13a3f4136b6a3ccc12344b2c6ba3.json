{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport './game.css';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { setMessage, setOpponent, setOpponentColour, setOpponentMoves, setPlayer, setPlayerColour, types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport GameOver from '../../components/gameover';\n// import io from 'socket.io-client';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverURL = \"http://localhost:8080\";\n\n// const socket = io('localhost:5000', {\n//     transports: ['websocket']\n// });\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n  const {\n    possibleMoves,\n    dispatch\n  } = useContext(GameContext);\n\n  // useEffect(() => {\n  //     axios.get(serverURL).then((response) => {\n  //         setString(response.data)\n  //     });\n  // });\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n\n  // listening for events from the server\n\n  //     useEffect(() => {\n  //         socket.on('connect_error', (error) => {\n  //             console.log('Websocket connection error: ', error)\n  //         });\n\n  //             socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, name, colour }) => {\n  //                 if (error){\n  //                     console.log(error)\n  //                 }\n  //                 dispatch(setPlayer(name));\n  //                 dispatch(setPlayerColour(colour))\n  //             });\n\n  //         socket.on('welcome', ({ message, opponent }) => {\n  //             dispatch(setMessage(message));\n  //             dispatch(setOpponent(opponent));\n  //         });\n  //         socket.on('opponentJoin', ({ message, opponent }) => {\n  //             dispatch(setMessage(message));\n  //             dispatch(setOpponent(opponent));\n  //             dispatch(setOpponentColour(opponent.colour));\n  //         });\n  //         socket.on('opponentLeft', ({ message }) => {\n  //             console.log(message)\n  //         });\n\n  //         socket.on('opponentMove', ({ from, to }) => {\n  //             chess.move({ from, to });\n  //             setFen(chess.fen());\n  //             dispatch(setMessage('Your Turn'));\n  //             dispatch(setOpponentMoves([from, to]));\n  //         });\n  //         socket.on('message',({ message })=> {\n  //             console.log(message)\n  //         });\n\n  // }, [chess, dispatch]);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n      // socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n      dispatch({\n        type: types.CLEAR_POSSIBLE_MOVES\n      }); // unhighlight possible moves\n      setFen(chess.fen()); // update the fen with the new move/piece positions\n    }\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  const [inputValue, setInputValue] = useState('');\n  const [string, setString] = useState('');\n  const sendFormData = event => {\n    event.preventDefault();\n    if (inputValue) {\n      setString(inputValue);\n      axios.post(serverURL + \"/testreact\", inputValue, {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      }).then(response => {\n        setString(response.data);\n      });\n    }\n  };\n\n  // const sendFormData = (event) => {\n  //     event.preventDefault()\n  //     axios.get(serverURL + \"/testreactget\").then((response) => {\n  //         setString(response.data)\n  //     });\n  // }\n\n  // if (gameOver) {\n  //     return <GameOver />\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"message\",\n      children: string\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendFormData,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Input name\",\n        value: inputValue,\n        onChange: ({\n          target\n        }) => setInputValue(target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 13\n  }, this);\n};\n_s(Game, \"AibgqNHc7XX5ZX3tUb7vqJ0Xbes=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","setMessage","setOpponent","setOpponentColour","setOpponentMoves","setPlayer","setPlayerColour","types","getGameOverState","GameOver","axios","jsxDEV","_jsxDEV","serverURL","FEN","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","possibleMoves","dispatch","status","type","GAME_OVER","player","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","from","to","validMove","includes","move","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","inputValue","setInputValue","string","setString","sendFormData","event","preventDefault","post","headers","then","response","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","cells","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport './game.css';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport {     \n    setMessage,\n    setOpponent,\n    setOpponentColour,\n    setOpponentMoves,\n    setPlayer,\n    setPlayerColour,\n    types, } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport  GameOver from '../../components/gameover';\n// import io from 'socket.io-client';\nimport axios from \"axios\"\n\n\nconst serverURL = \"http://localhost:8080\"\n\n\n\n// const socket = io('localhost:5000', {\n//     transports: ['websocket']\n// });\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n    const { possibleMoves, dispatch } = useContext(GameContext);\n\n    // useEffect(() => {\n    //     axios.get(serverURL).then((response) => {\n    //         setString(response.data)\n    //     });\n    // });\n \n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n\n        \n    // listening for events from the server\n\n//     useEffect(() => {\n//         socket.on('connect_error', (error) => {\n//             console.log('Websocket connection error: ', error)\n//         });\n\n//             socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, name, colour }) => {\n//                 if (error){\n//                     console.log(error)\n//                 }\n//                 dispatch(setPlayer(name));\n//                 dispatch(setPlayerColour(colour))\n//             });\n\n\n//         socket.on('welcome', ({ message, opponent }) => {\n//             dispatch(setMessage(message));\n//             dispatch(setOpponent(opponent));\n//         });\n//         socket.on('opponentJoin', ({ message, opponent }) => {\n//             dispatch(setMessage(message));\n//             dispatch(setOpponent(opponent));\n//             dispatch(setOpponentColour(opponent.colour));\n//         });\n//         socket.on('opponentLeft', ({ message }) => {\n//             console.log(message)\n//         });\n    \n//         socket.on('opponentMove', ({ from, to }) => {\n//             chess.move({ from, to });\n//             setFen(chess.fen());\n//             dispatch(setMessage('Your Turn'));\n//             dispatch(setOpponentMoves([from, to]));\n//         });\n//         socket.on('message',({ message })=> {\n//             console.log(message)\n//         });\n\n// }, [chess, dispatch]);\n\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */\n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n            // socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n            dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n            setFen(chess.fen()); // update the fen with the new move/piece positions\n        }\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    };\n\n\n    \n    const [inputValue, setInputValue] = useState('')\n    const [string, setString] = useState('')\n\n\n\n    const sendFormData = (event) => {\n        event.preventDefault()\n        if (inputValue){\n            setString(inputValue)\n            axios.post(serverURL + \"/testreact\",inputValue,\n                {headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n            }    \n        ).then((response) =>{\n            setString(response.data)\n        });\n\n        }\n    }\n\n        // const sendFormData = (event) => {\n        //     event.preventDefault()\n        //     axios.get(serverURL + \"/testreactget\").then((response) => {\n        //         setString(response.data)\n        //     });\n        // }\n    \n\n\n\n\n\n\n    // if (gameOver) {\n    //     return <GameOver />\n    // };\n\n    return (\n            <div className=\"game\">\n                <h2 className=\"message\">{string}</h2>\n                <form onSubmit={sendFormData}>\n                    <input\n                        placeholder='Input name'\n                        value = {inputValue}\n                        onChange = {({ target }) => setInputValue(target.value)}\n                    />\n                    <button type=\"submit\">Submit</button>\n                </form>\n            <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n            </div>\n    );\n\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}