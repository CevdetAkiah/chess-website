{"ast":null,"code":"import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = moves => {\n  return moves.map(move => {\n    const n = move.length;\n    const [position, castling] = checkCastling(move, moves);\n    if (castling) {\n      return position;\n    }\n    ;\n    if (move.substring(n - 1) === '+') {\n      // if a move results in check\n      return move.substring(n - 3, n - 1);\n    }\n    ;\n    return move.substring(n - 2);\n  });\n};\nconst checkCastling = (move, moves) => {\n  switch (move) {\n    case \"O-O\":\n      // kingside castle\n      if (moves.includes(\"Kf1\")) {\n        return [\"g1\", true];\n      }\n      ;\n      if (moves.includes(\"Kf8\")) {\n        return [\"g8\", true];\n      }\n      ;\n      break;\n    case \"O-O-O\":\n      // queenside castle\n      if (moves.includes(\"Kd1\")) {\n        return [\"c1\", true];\n      }\n      ;\n      if (moves.includes(\"Kd8\")) {\n        return [\"c8\", true];\n      }\n      ;\n      break;\n    default:\n      return [null, false];\n  }\n  ;\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_POSSIBLE_MOVES:\n      // highlight possible cells to move to\n      return {\n        ...state,\n        possibleMoves: getPositions(action.moves)\n      };\n    case types.CLEAR_POSSIBLE_MOVES:\n      // unhighlight cells\n      return {\n        ...state,\n        possibleMoves: []\n      };\n    case types.SET_TURN:\n      return {\n        ...state,\n        turn: action.player,\n        check: action.check\n      };\n    case types.GAME_OVER:\n      return {\n        ...state,\n        gameOver: true,\n        status: action.status,\n        turn: action.player\n      };\n    case types.SET_PLAYER:\n      return {\n        ...state,\n        playerName: action.name\n      };\n    case types.SET_PLAYER_COLOuR:\n      return {\n        ...state,\n        playerColour: action.colour\n      };\n    case types.SET_OPPONENT:\n      return {\n        ...state,\n        opponentName: action.name\n      };\n    case types.SET_MESSAGE:\n      return {\n        ...state,\n        message: action.message\n      };\n    case types.CLEAR_MESSAGE:\n      return {\n        ...state,\n        message: ''\n      };\n    case types.SET_OPPONENT_MOVES:\n      return {\n        ...state,\n        opponentMoves: action.moves\n      };\n    case types.CLEAR_OPPONENT_MOVES:\n      return {\n        ...state,\n        opponentMoves: []\n      };\n    default:\n      return state;\n  }\n};\n_c = GameReducer;\nexport default GameReducer;\nvar _c;\n$RefreshReg$(_c, \"GameReducer\");","map":{"version":3,"names":["types","getPositions","moves","map","move","n","length","position","castling","checkCastling","substring","includes","GameReducer","state","action","type","SET_POSSIBLE_MOVES","possibleMoves","CLEAR_POSSIBLE_MOVES","SET_TURN","turn","player","check","GAME_OVER","gameOver","status","SET_PLAYER","playerName","name","SET_PLAYER_COLOuR","playerColour","colour","SET_OPPONENT","opponentName","SET_MESSAGE","message","CLEAR_MESSAGE","SET_OPPONENT_MOVES","opponentMoves","CLEAR_OPPONENT_MOVES","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-client/src/context/GameReducer.js"],"sourcesContent":["import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = (moves) => {\n    return moves.map((move) => {\n    const n = move.length;\n       const [position, castling] = checkCastling(move,moves)\n        if (castling){\n            return position\n        };\n            if (move.substring(n-1) === '+'){ // if a move results in check\n                return move.substring(n-3, n-1)\n            }; \n            return move.substring(n-2)\n        });\n};\n\nconst checkCastling = (move, moves) => {\n    switch (move) {\n        case \"O-O\": // kingside castle\n            if (moves.includes(\"Kf1\")){\n                return [\"g1\", true]\n            };\n            if (moves.includes(\"Kf8\")){\n                return [\"g8\",true]\n            };\n            break;\n        case \"O-O-O\": // queenside castle\n            if (moves.includes(\"Kd1\")){\n                return [\"c1\",true]\n            };\n            if (moves.includes(\"Kd8\")){\n                return [\"c8\",true]\n            };\n            break;\n        default:\n            return [null,false]\n    };\n\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) =>{\n    switch (action.type) {\n        case types.SET_POSSIBLE_MOVES: // highlight possible cells to move to\n            return {\n                ...state,\n                possibleMoves: getPositions(action.moves),\n            };\n            case types.CLEAR_POSSIBLE_MOVES: // unhighlight cells\n                return {\n                    ...state,\n                    possibleMoves: [],\n                };\n            case types.SET_TURN:\n                return {\n                    ...state,\n                    turn: action.player,\n                    check: action.check,\n                };\n            case types.GAME_OVER:\n                return {\n                    ...state,\n                    gameOver: true,\n                    status: action.status,\n                    turn: action.player,\n                }\n\n            case types.SET_PLAYER:\n                return { ...state, playerName: action.name };\n            case types.SET_PLAYER_COLOuR:\n                return { ...state, playerColour: action.colour };\n            case types.SET_OPPONENT:\n                return { ...state, opponentName: action.name };\n            case types.SET_MESSAGE:\n                return { ...state, message: action.message };\n            case types.CLEAR_MESSAGE:\n                return { ...state, message: '' };\n            case types.SET_OPPONENT_MOVES:\n                return { ...state, opponentMoves: action.moves };\n            case types.CLEAR_OPPONENT_MOVES:\n                 return { ...state, opponentMoves: [] };\n            default:\n                return state;\n    }\n};\n\nexport default GameReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}