{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/react-chess/chess-client/src/components/cell/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { isLightSquare, Cell as BoardCell } from '../../functions/';\nimport PropTypes from 'prop-types';\nimport Piece from '../piece';\nimport { GameContext } from '../../context/GameContext';\nimport './cell-styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = ({\n  cell,\n  index,\n  makeMove,\n  setFromPos\n}) => {\n  _s();\n  const light = isLightSquare(cell.pos, index); /**returns true if cell should be light */\n\n  const {\n    possibleMoves,\n    turn,\n    check,\n    playerColour\n  } = useContext(GameContext);\n  console.log(\"Cell turn: \", turn);\n  const isPossibleMove = possibleMoves.includes(cell.pos); // check if this cell's position is a possible move\n\n  const colour = cell.piece.toUpperCase() === cell.piece ? 'w' : 'b';\n\n  // TODO: inCheck is returning false when it shouldn't\n  const inCheck = () => {\n    const king = cell.piece.toUpperCase === 'K';\n    return turn === colour && king && check; // return true if the turn is the colour of current player and the piece is a king and in check (according to Chess.js)\n  };\n\n  const handleDrop = () => {\n    console.log(\"turn: \", turn);\n    console.log(\"playercolour: \", playerColour);\n    if (turn === playerColour) {\n      makeMove(cell.pos);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `cell ${light ? 'light' : 'dark'}`,\n    onDrop: handleDrop,\n    onDragOver: e => e.preventDefault(),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `overlay ${isPossibleMove && 'possible-move'} ${inCheck() && 'check'}`,\n      children: /*#__PURE__*/_jsxDEV(Piece, {\n        name: cell.piece,\n        pos: cell.pos,\n        setFromPos: setFromPos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n_s(Cell, \"WgWFZBoHs/jEeJQaf2lgnbjWMuc=\");\n_c = Cell;\nCell.prototype = {\n  cell: PropTypes.instanceOf(BoardCell).isRequired,\n  index: PropTypes.number.isRequired,\n  makeMove: PropTypes.func,\n  setFromPos: PropTypes.func\n};\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","useContext","isLightSquare","Cell","BoardCell","PropTypes","Piece","GameContext","jsxDEV","_jsxDEV","cell","index","makeMove","setFromPos","_s","light","pos","possibleMoves","turn","check","playerColour","console","log","isPossibleMove","includes","colour","piece","toUpperCase","inCheck","king","handleDrop","className","onDrop","onDragOver","e","preventDefault","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","prototype","instanceOf","isRequired","number","func","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-client/src/components/cell/index.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { isLightSquare, Cell as BoardCell } from '../../functions/';\nimport PropTypes from 'prop-types';\nimport Piece from'../piece';\nimport { GameContext } from '../../context/GameContext';\nimport './cell-styles.css';\n\nconst Cell = ( {cell, index, makeMove, setFromPos} ) => {\n    const light = isLightSquare(cell.pos, index); /**returns true if cell should be light */\n\n    const { possibleMoves, turn, check, playerColour } = useContext(GameContext); \n    console.log(\"Cell turn: \", turn)\n    const isPossibleMove = possibleMoves.includes(cell.pos); // check if this cell's position is a possible move\n\n    const colour = cell.piece.toUpperCase() === cell.piece ? 'w' : 'b';\n\n// TODO: inCheck is returning false when it shouldn't\n    const inCheck = () => {\n        const king = cell.piece.toUpperCase === 'K';\n        return turn === colour && king && check; // return true if the turn is the colour of current player and the piece is a king and in check (according to Chess.js)\n    }\n\n    const handleDrop = () => {\n        console.log(\"turn: \",turn)\n        console.log(\"playercolour: \", playerColour)\n        if (turn === playerColour){\n            makeMove(cell.pos);\n        }\n    };\n\n    return ( \n         <div\n             className={`cell ${light ? 'light' : 'dark'}`}\n            onDrop={handleDrop}\n            onDragOver={(e) => e.preventDefault()}\n         >\n            <div className={`overlay ${isPossibleMove && 'possible-move'} ${ inCheck() && 'check' }`}>\n                 <Piece name={cell.piece} pos={cell.pos}  setFromPos={setFromPos} />\n            </div>\n         </div>\n    );\n        \n};\n\nCell.prototype = {\n    cell: PropTypes.instanceOf(BoardCell).isRequired,\n    index: PropTypes.number.isRequired,\n    makeMove: PropTypes.func,\n    setFromPos: PropTypes.func,\n}\n\nexport default Cell;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,aAAa,EAAEC,IAAI,IAAIC,SAAS,QAAQ,kBAAkB;AACnE,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAK,UAAU;AAC3B,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMN,IAAI,GAAGA,CAAE;EAACO,IAAI;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAM;EAAAC,EAAA;EACpD,MAAMC,KAAK,GAAGb,aAAa,CAACQ,IAAI,CAACM,GAAG,EAAEL,KAAK,CAAC,CAAC,CAAC;;EAE9C,MAAM;IAAEM,aAAa;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAa,CAAC,GAAGnB,UAAU,CAACM,WAAW,CAAC;EAC5Ec,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,IAAI,CAAC;EAChC,MAAMK,cAAc,GAAGN,aAAa,CAACO,QAAQ,CAACd,IAAI,CAACM,GAAG,CAAC,CAAC,CAAC;;EAEzD,MAAMS,MAAM,GAAGf,IAAI,CAACgB,KAAK,CAACC,WAAW,CAAC,CAAC,KAAKjB,IAAI,CAACgB,KAAK,GAAG,GAAG,GAAG,GAAG;;EAEtE;EACI,MAAME,OAAO,GAAGA,CAAA,KAAM;IAClB,MAAMC,IAAI,GAAGnB,IAAI,CAACgB,KAAK,CAACC,WAAW,KAAK,GAAG;IAC3C,OAAOT,IAAI,KAAKO,MAAM,IAAII,IAAI,IAAIV,KAAK,CAAC,CAAC;EAC7C,CAAC;;EAED,MAAMW,UAAU,GAAGA,CAAA,KAAM;IACrBT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACJ,IAAI,CAAC;IAC1BG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,YAAY,CAAC;IAC3C,IAAIF,IAAI,KAAKE,YAAY,EAAC;MACtBR,QAAQ,CAACF,IAAI,CAACM,GAAG,CAAC;IACtB;EACJ,CAAC;EAED,oBACKP,OAAA;IACIsB,SAAS,EAAG,QAAOhB,KAAK,GAAG,OAAO,GAAG,MAAO,EAAE;IAC/CiB,MAAM,EAAEF,UAAW;IACnBG,UAAU,EAAGC,CAAC,IAAKA,CAAC,CAACC,cAAc,CAAC,CAAE;IAAAC,QAAA,eAEtC3B,OAAA;MAAKsB,SAAS,EAAG,WAAUR,cAAc,IAAI,eAAgB,IAAIK,OAAO,CAAC,CAAC,IAAI,OAAS,EAAE;MAAAQ,QAAA,eACpF3B,OAAA,CAACH,KAAK;QAAC+B,IAAI,EAAE3B,IAAI,CAACgB,KAAM;QAACV,GAAG,EAAEN,IAAI,CAACM,GAAI;QAAEH,UAAU,EAAEA;MAAW;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAGf,CAAC;AAAC3B,EAAA,CAnCIX,IAAI;AAAAuC,EAAA,GAAJvC,IAAI;AAqCVA,IAAI,CAACwC,SAAS,GAAG;EACbjC,IAAI,EAAEL,SAAS,CAACuC,UAAU,CAACxC,SAAS,CAAC,CAACyC,UAAU;EAChDlC,KAAK,EAAEN,SAAS,CAACyC,MAAM,CAACD,UAAU;EAClCjC,QAAQ,EAAEP,SAAS,CAAC0C,IAAI;EACxBlC,UAAU,EAAER,SAAS,CAAC0C;AAC1B,CAAC;AAED,eAAe5C,IAAI;AAAC,IAAAuC,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}