{"ast":null,"code":"import _objectSpread from\"/home/cevdet/go-projects/chess-website/_chess-client/chess-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/cevdet/go-projects/chess-website/_chess-client/chess-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{types}from'./actions';// returns an array of possible moves \nvar getPositions=function getPositions(moves){return moves.map(function(move){var n=move.length;var _checkCastling=checkCastling(move,moves),_checkCastling2=_slicedToArray(_checkCastling,2),position=_checkCastling2[0],castling=_checkCastling2[1];if(castling){return position;};if(move.substring(n-1)==='+'){// if a move results in check\nreturn move.substring(n-3,n-1);};return move.substring(n-2);});};var checkCastling=function checkCastling(move,moves){switch(move){case\"O-O\":// kingside castle\nif(moves.includes(\"Kf1\")){return[\"g1\",true];};if(moves.includes(\"Kf8\")){return[\"g8\",true];};break;case\"O-O-O\":// queenside castle\nif(moves.includes(\"Kd1\")){return[\"c1\",true];};if(moves.includes(\"Kd8\")){return[\"c8\",true];};break;default:return[null,false];};};// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nvar GameReducer=function GameReducer(state,action){switch(action.type){case types.SET_POSSIBLE_MOVES:// highlight possible cells to move to\nreturn _objectSpread(_objectSpread({},state),{},{possibleMoves:getPositions(action.moves)});case types.CLEAR_POSSIBLE_MOVES:// unhighlight cells\nreturn _objectSpread(_objectSpread({},state),{},{possibleMoves:[]});case types.SET_TURN:return _objectSpread(_objectSpread({},state),{},{turn:action.player,check:action.check});case types.GAME_OVER:return _objectSpread(_objectSpread({},state),{},{gameOver:true,status:action.status,turn:action.player});case types.SET_PLAYER:return _objectSpread(_objectSpread({},state),{},{playerName:action.name});case types.SET_PLAYER_COLOUR:return _objectSpread(_objectSpread({},state),{},{playerColour:action.colour});case types.SET_OPPONENT:return _objectSpread(_objectSpread({},state),{},{opponentName:action.name});case types.SET_MESSAGE:return _objectSpread(_objectSpread({},state),{},{message:action.message});case types.CLEAR_MESSAGE:return _objectSpread(_objectSpread({},state),{},{message:''});case types.SET_OPPONENT_MOVES:return _objectSpread(_objectSpread({},state),{},{opponentMoves:action.moves});case types.CLEAR_OPPONENT_MOVES:return _objectSpread(_objectSpread({},state),{},{opponentMoves:[]});case types.SET_OPPONENT_COLOUR:return _objectSpread(_objectSpread({},state),{},{opponentColour:action.colour});default:return state;}};export default GameReducer;","map":{"version":3,"names":["types","getPositions","moves","map","move","n","length","_checkCastling","checkCastling","_checkCastling2","_slicedToArray","position","castling","substring","includes","GameReducer","state","action","type","SET_POSSIBLE_MOVES","_objectSpread","possibleMoves","CLEAR_POSSIBLE_MOVES","SET_TURN","turn","player","check","GAME_OVER","gameOver","status","SET_PLAYER","playerName","name","SET_PLAYER_COLOUR","playerColour","colour","SET_OPPONENT","opponentName","SET_MESSAGE","message","CLEAR_MESSAGE","SET_OPPONENT_MOVES","opponentMoves","CLEAR_OPPONENT_MOVES","SET_OPPONENT_COLOUR","opponentColour"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/context/GameReducer.js"],"sourcesContent":["import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = (moves) => {\n    return moves.map((move) => {\n    const n = move.length;\n       const [position, castling] = checkCastling(move,moves)\n        if (castling){\n            return position\n        };\n            if (move.substring(n-1) === '+'){ // if a move results in check\n                return move.substring(n-3, n-1)\n            }; \n            return move.substring(n-2)\n        });\n};\n\nconst checkCastling = (move, moves) => {\n    switch (move) {\n        case \"O-O\": // kingside castle\n            if (moves.includes(\"Kf1\")){\n                return [\"g1\", true]\n            };\n            if (moves.includes(\"Kf8\")){\n                return [\"g8\",true]\n            };\n            break;\n        case \"O-O-O\": // queenside castle\n            if (moves.includes(\"Kd1\")){\n                return [\"c1\",true]\n            };\n            if (moves.includes(\"Kd8\")){\n                return [\"c8\",true]\n            };\n            break;\n        default:\n            return [null,false]\n    };\n\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) =>{\n    switch (action.type) {\n        case types.SET_POSSIBLE_MOVES: // highlight possible cells to move to\n            return {\n                ...state,\n                possibleMoves: getPositions(action.moves),\n            };\n            case types.CLEAR_POSSIBLE_MOVES: // unhighlight cells\n                return {\n                    ...state,\n                    possibleMoves: [],\n                };\n            case types.SET_TURN:\n                return {\n                    ...state,\n                    turn: action.player,\n                    check: action.check,\n                };\n            case types.GAME_OVER:\n                return {\n                    ...state,\n                    gameOver: true,\n                    status: action.status,\n                    turn: action.player,\n                }\n\n            case types.SET_PLAYER:\n                return { ...state, playerName: action.name };\n            case types.SET_PLAYER_COLOUR:\n                return { ...state, playerColour: action.colour };\n            case types.SET_OPPONENT:\n                return { ...state, opponentName: action.name };\n            case types.SET_MESSAGE:\n                return { ...state, message: action.message };\n            case types.CLEAR_MESSAGE:\n                return { ...state, message: '' };\n            case types.SET_OPPONENT_MOVES:\n                return { ...state, opponentMoves: action.moves };\n            case types.CLEAR_OPPONENT_MOVES:\n                 return { ...state, opponentMoves: [] };\n            case types.SET_OPPONENT_COLOUR:\n                return { ...state, opponentColour: action.colour };\n            default:\n                return state;\n    }\n};\n\nexport default GameReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}