{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/react-chess/chess-client/src/components/cell/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { isLightSquare, Cell as BoardCell } from '../../functions/';\nimport PropTypes from 'prop-types';\nimport Piece from '../piece';\nimport { GameContext } from '../../context/GameContext';\nimport './cell-styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = ({\n  cell,\n  index,\n  makeMove,\n  setFromPos\n}) => {\n  _s();\n  const light = isLightSquare(cell.pos, index);\n\n  // Access the 'turn' value from the context\n  const {\n    possibleMoves,\n    turn,\n    check,\n    playerColour\n  } = useContext(GameContext);\n\n  // Conditionally render the component based on 'turn'\n  const renderContent = () => {\n    if (turn === playerColour) {\n      // This is the current player's turn, you can render the component's content here.\n      const isPossibleMove = possibleMoves.includes(cell.pos);\n      const colour = cell.piece.toUpperCase() === cell.piece ? 'w' : 'b';\n      const inCheck = () => {\n        const king = cell.piece.toUpperCase === 'K';\n        return turn === colour && king && check;\n      };\n      const handleDrop = () => {\n        makeMove(cell.pos);\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${light ? 'light' : 'dark'}`,\n        onDrop: handleDrop,\n        onDragOver: e => e.preventDefault(),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `overlay ${isPossibleMove && 'possible-move'} ${inCheck() && 'check'}`,\n          children: /*#__PURE__*/_jsxDEV(Piece, {\n            name: cell.piece,\n            pos: cell.pos,\n            setFromPos: setFromPos\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this);\n    } else {\n      // It's not the current player's turn, you can render a placeholder or empty cell.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${light ? 'light' : 'dark'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  return renderContent();\n};\n_s(Cell, \"WgWFZBoHs/jEeJQaf2lgnbjWMuc=\");\n_c = Cell;\nCell.propTypes = {\n  cell: PropTypes.instanceOf(BoardCell).isRequired,\n  index: PropTypes.number.isRequired,\n  makeMove: PropTypes.func,\n  setFromPos: PropTypes.func\n};\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","useContext","isLightSquare","Cell","BoardCell","PropTypes","Piece","GameContext","jsxDEV","_jsxDEV","cell","index","makeMove","setFromPos","_s","light","pos","possibleMoves","turn","check","playerColour","renderContent","isPossibleMove","includes","colour","piece","toUpperCase","inCheck","king","handleDrop","className","onDrop","onDragOver","e","preventDefault","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","instanceOf","isRequired","number","func","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-client/src/components/cell/index.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { isLightSquare, Cell as BoardCell } from '../../functions/';\nimport PropTypes from 'prop-types';\nimport Piece from'../piece';\nimport { GameContext } from '../../context/GameContext';\nimport './cell-styles.css';\n\nconst Cell = ({ cell, index, makeMove, setFromPos }) => {\n    const light = isLightSquare(cell.pos, index);\n\n    // Access the 'turn' value from the context\n    const { possibleMoves, turn, check, playerColour } = useContext(GameContext);\n\n    // Conditionally render the component based on 'turn'\n    const renderContent = () => {\n        if (turn === playerColour) {\n            // This is the current player's turn, you can render the component's content here.\n            const isPossibleMove = possibleMoves.includes(cell.pos);\n            const colour = cell.piece.toUpperCase() === cell.piece ? 'w' : 'b';\n\n            const inCheck = () => {\n                const king = cell.piece.toUpperCase === 'K';\n                return turn === colour && king && check;\n            };\n\n            const handleDrop = () => {\n                makeMove(cell.pos);\n            };\n\n            return (\n                <div\n                    className={`cell ${light ? 'light' : 'dark'}`}\n                    onDrop={handleDrop}\n                    onDragOver={(e) => e.preventDefault()}\n                >\n                    <div className={`overlay ${isPossibleMove && 'possible-move'} ${inCheck() && 'check'}`}>\n                        <Piece name={cell.piece} pos={cell.pos} setFromPos={setFromPos} />\n                    </div>\n                </div>\n            );\n        } else {\n            // It's not the current player's turn, you can render a placeholder or empty cell.\n            return (\n                <div className={`cell ${light ? 'light' : 'dark'}`}>\n                    {/* Render empty cell or placeholder content */}\n                </div>\n            );\n        }\n    };\n\n    return renderContent();\n};\n\nCell.propTypes = {\n    cell: PropTypes.instanceOf(BoardCell).isRequired,\n    index: PropTypes.number.isRequired,\n    makeMove: PropTypes.func,\n    setFromPos: PropTypes.func,\n};\n\nexport default Cell;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}