{"ast":null,"code":"import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = moves => {\n  return moves.map(move => {\n    if (moves.includes(\"O-O\") && moves.includes(move.substring(n - 2) === \"f1\")) {\n      console.log(\"test\");\n    }\n    const n = move.length;\n    if (move.substring(n - 1) === '+') {\n      // if a move results in check\n      return move.substring(n - 3, n - 1);\n    } else if (move.substring(0, 1) === \"O\") {\n      console.log(\"move: \", move);\n      return move;\n    }\n    return move.substring(n - 2);\n  });\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_POSSIBLE_MOVES:\n      // highlight possible cells to move to\n      return {\n        ...state,\n        possibleMoves: getPositions(action.moves)\n      };\n    case types.CLEAR_POSSIBLE_MOVES:\n      // unhighlight cells\n      return {\n        ...state,\n        possibleMoves: []\n      };\n    case types.SET_TURN:\n      return {\n        ...state,\n        turn: action.player,\n        check: action.check\n      };\n    default:\n      return state;\n  }\n};\n_c = GameReducer;\nexport default GameReducer;\nvar _c;\n$RefreshReg$(_c, \"GameReducer\");","map":{"version":3,"names":["types","getPositions","moves","map","move","includes","substring","n","console","log","length","GameReducer","state","action","type","SET_POSSIBLE_MOVES","possibleMoves","CLEAR_POSSIBLE_MOVES","SET_TURN","turn","player","check","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-app/src/context/GameReducer.js"],"sourcesContent":["import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = (moves) => {\n    return moves.map((move) => {\n        if (moves.includes(\"O-O\") && moves.includes(move.substring(n-2) === \"f1\")){\n            console.log(\"test\")\n        }\n        const n = move.length;\n         if (move.substring(n-1) === '+'){ // if a move results in check\n            return move.substring(n-3, n-1)\n        } else if (move.substring(0,1) === \"O\"){\n            \n            console.log(\"move: \", move)\n            return move\n        }\n        return move.substring(n-2)\n    });\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) =>{\n    switch (action.type) {\n        case types.SET_POSSIBLE_MOVES: // highlight possible cells to move to\n            return {\n                ...state,\n                possibleMoves: getPositions(action.moves),\n            };\n            case types.CLEAR_POSSIBLE_MOVES: // unhighlight cells\n                return {\n                    ...state,\n                    possibleMoves: [],\n                };\n            case types.SET_TURN:\n                return {\n                    ...state,\n                    turn: action.player,\n                    check: action.check,\n                };\n            default:\n                return state;\n    }\n};\n\nexport default GameReducer;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;;AAEjC;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC5B,OAAOA,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;IACvB,IAAIF,KAAK,CAACG,QAAQ,CAAC,KAAK,CAAC,IAAIH,KAAK,CAACG,QAAQ,CAACD,IAAI,CAACE,SAAS,CAACC,CAAC,GAAC,CAAC,CAAC,KAAK,IAAI,CAAC,EAAC;MACtEC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACvB;IACA,MAAMF,CAAC,GAAGH,IAAI,CAACM,MAAM;IACpB,IAAIN,IAAI,CAACE,SAAS,CAACC,CAAC,GAAC,CAAC,CAAC,KAAK,GAAG,EAAC;MAAE;MAC/B,OAAOH,IAAI,CAACE,SAAS,CAACC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,CAAC;IACnC,CAAC,MAAM,IAAIH,IAAI,CAACE,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,GAAG,EAAC;MAEnCE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,IAAI,CAAC;MAC3B,OAAOA,IAAI;IACf;IACA,OAAOA,IAAI,CAACE,SAAS,CAACC,CAAC,GAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAMI,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAI;EAClC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKd,KAAK,CAACe,kBAAkB;MAAE;MAC3B,OAAO;QACH,GAAGH,KAAK;QACRI,aAAa,EAAEf,YAAY,CAACY,MAAM,CAACX,KAAK;MAC5C,CAAC;IACD,KAAKF,KAAK,CAACiB,oBAAoB;MAAE;MAC7B,OAAO;QACH,GAAGL,KAAK;QACRI,aAAa,EAAE;MACnB,CAAC;IACL,KAAKhB,KAAK,CAACkB,QAAQ;MACf,OAAO;QACH,GAAGN,KAAK;QACRO,IAAI,EAAEN,MAAM,CAACO,MAAM;QACnBC,KAAK,EAAER,MAAM,CAACQ;MAClB,CAAC;IACL;MACI,OAAOT,KAAK;EACxB;AACJ,CAAC;AAACU,EAAA,GArBIX,WAAW;AAuBjB,eAAeA,WAAW;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}