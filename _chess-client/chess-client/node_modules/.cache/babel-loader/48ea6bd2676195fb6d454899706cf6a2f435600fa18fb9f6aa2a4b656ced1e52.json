{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/react-chess/chess-client/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport GameOver from '../../components/gameover';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('localhost:5000');\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n\n  // listening for events from the server\n  useEffect(() => {\n    socket.emit('join', {\n      name: 'Frank',\n      gameID: '20'\n    }, ({\n      error,\n      color\n    }) => {\n      console.log({\n        color\n      });\n    });\n    socket.on('Welcome', ({\n      message,\n      opponent\n    }) => {\n      console.log({\n        message,\n        opponent\n      });\n    });\n    socket.on('opponentJoin', ({\n      message,\n      opponent\n    }) => {\n      console.log({\n        message,\n        opponent\n      });\n    });\n    socket.on('opponentMove', ({\n      from,\n      to\n    }) => {\n      chess.move({\n        from,\n        to\n      });\n      setFen(chess.fen());\n    });\n  }, [chess]);\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n  const {\n    possibleMoves,\n    dispatch\n  } = useContext(GameContext);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n    }\n    dispatch({\n      type: types.CLEAR_POSSIBLE_MOVES\n    }); // unhighlight possible moves\n    setFen(chess.fen()); // update the fen with the new move/piece positions\n    socket.emit('move', {\n      gameID: '20',\n      from,\n      to: pos\n    }); // send moves to the other player through the websocket\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  if (gameOver) {\n    return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 8\n  }, this);\n};\n_s(Game, \"QF33TOGyBKDVeDvvuWf2Lp7yguY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","types","getGameOverState","GameOver","io","jsxDEV","_jsxDEV","socket","FEN","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","emit","name","gameID","error","color","console","log","on","message","opponent","from","to","move","possibleMoves","dispatch","status","type","GAME_OVER","player","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","validMove","includes","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","fileName","_jsxFileName","lineNumber","columnNumber","className","children","cells","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-client/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport  GameOver from '../../components/gameover';\nimport io from 'socket.io-client';\n\nconst socket = io('localhost:5000');\n\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n\n   // listening for events from the server\n   useEffect(() => {\n    socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, color }) => {\n        console.log({ color });\n    });\n    socket.on('Welcome', ({ message, opponent }) => {\n        console.log({ message, opponent });\n    });\n    socket.on('opponentJoin', ({ message, opponent }) => {\n        console.log({ message, opponent });\n    });\n\n    socket.on('opponentMove', ({ from, to }) => {\n        chess.move({ from, to });\n        setFen(chess.fen());\n    });\n}, [chess]);\n\n\n \n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n    const { possibleMoves, dispatch } = useContext(GameContext);\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */\n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n        }\n        dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n        setFen(chess.fen()); // update the fen with the new move/piece positions\n        socket.emit('move', { gameID: '20', from, to: pos}) // send moves to the other player through the websocket\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    }\n\n\n\n\n\nif (gameOver) {\n    return <GameOver />\n}\nreturn <div className=\"game\">\n    <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n</div>\n\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}