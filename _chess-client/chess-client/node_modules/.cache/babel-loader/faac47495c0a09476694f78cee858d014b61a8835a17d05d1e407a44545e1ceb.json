{"ast":null,"code":"var _jsxFileName = \"/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport './game.css';\nimport { Chess } from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport { setMessage, setOpponent, setOpponentColour, setOpponentMoves, setPlayer, setPlayerColour, types } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport GameOver from '../../components/gameover';\nimport UserForm from '../../components/userform';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('localhost:5000', {\n  transports: ['websocket']\n});\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(FEN);\n  const {\n    current: chess\n  } = useRef(new Chess(fen));\n  const [board, setBoard] = useState(createBoard(fen));\n  const {\n    gameOver\n  } = useContext(GameContext);\n  const {\n    possibleMoves,\n    dispatch\n  } = useContext(GameContext);\n\n  // useEffect(() => {\n  //     axios.get(serverURL).then((response) => {\n  //         setString(response.data)\n  //     });\n  // });\n\n  // every time a change is made to the state of the game, the board is updated with the new fen\n  useEffect(() => {\n    setBoard(createBoard(fen));\n  }, [fen]);\n\n  // listening for events from the server\n\n  useEffect(() => {\n    socket.on('connect_error', error => {\n      console.log('Websocket connection error: ', error);\n    });\n    socket.emit('join', {\n      name: 'Frank',\n      gameID: '20'\n    }, ({\n      error,\n      name,\n      colour\n    }) => {\n      if (error) {\n        console.log(error);\n      }\n      dispatch(setPlayer(name));\n      dispatch(setPlayerColour(colour));\n    });\n    socket.on('welcome', ({\n      message,\n      opponent\n    }) => {\n      dispatch(setMessage(message));\n      dispatch(setOpponent(opponent));\n    });\n    socket.on('opponentJoin', ({\n      message,\n      opponent\n    }) => {\n      dispatch(setMessage(message));\n      dispatch(setOpponent(opponent));\n      dispatch(setOpponentColour(opponent.colour));\n    });\n    socket.on('opponentLeft', ({\n      message\n    }) => {\n      console.log(message);\n    });\n    socket.on('opponentMove', ({\n      from,\n      to\n    }) => {\n      chess.move({\n        from,\n        to\n      });\n      setFen(chess.fen());\n      dispatch(setMessage('Your Turn'));\n      dispatch(setOpponentMoves([from, to]));\n    });\n    socket.on('message', ({\n      message\n    }) => {\n      console.log(message);\n    });\n  }, [chess, dispatch]);\n\n  // will detect if a player is in check\n  useEffect(() => {\n    const [gameOver, status] = getGameOverState(chess);\n    if (gameOver) {\n      dispatch({\n        type: types.GAME_OVER,\n        status,\n        player: chess.turn()\n      });\n      return;\n    }\n    dispatch({\n      type: types.SET_TURN,\n      player: chess.turn(),\n      check: chess.isCheck()\n    });\n  }, [fen, dispatch, chess]);\n\n  /** move handling */\n  const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n  // share move set with components\n\n  const makeMove = pos => {\n    const from = fromPos.current;\n    const to = pos;\n    var validMove = possibleMoves.includes(to);\n    if (validMove) {\n      chess.move({\n        from,\n        to\n      });\n      // socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n      dispatch({\n        type: types.CLEAR_POSSIBLE_MOVES\n      }); // unhighlight possible moves\n      setFen(chess.fen()); // update the fen with the new move/piece positions\n    }\n  };\n\n  // this is called once a piece is dragged\n  const setFromPos = pos => {\n    fromPos.current = pos;\n    dispatch({\n      type: types.SET_POSSIBLE_MOVES,\n      moves: chess.moves({\n        square: pos\n      }) // send the possible moves from the currently selected position to highlight\n    });\n  };\n\n  // if (gameOver) {\n  //     return <GameOver />\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      makeMove: makeMove,\n      setFromPos: setFromPos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 13\n  }, this);\n};\n_s(Game, \"NoDznaP8jUE1UDA7FTg2kNmBGDY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Chess","createBoard","Board","GameContext","setMessage","setOpponent","setOpponentColour","setOpponentMoves","setPlayer","setPlayerColour","types","getGameOverState","GameOver","UserForm","io","jsxDEV","_jsxDEV","socket","transports","FEN","Game","_s","fen","setFen","current","chess","board","setBoard","gameOver","possibleMoves","dispatch","on","error","console","log","emit","name","gameID","colour","message","opponent","from","to","move","status","type","GAME_OVER","player","turn","SET_TURN","check","isCheck","fromPos","makeMove","pos","validMove","includes","CLEAR_POSSIBLE_MOVES","setFromPos","SET_POSSIBLE_MOVES","moves","square","className","children","cells","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/chess-website/_chess-client/chess-client/src/pages/Game/index.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext} from 'react';\nimport './game.css';\nimport {Chess} from 'chess.js';\nimport { createBoard } from '../../functions/create-board';\nimport Board from  '../../components/board';\nimport { GameContext } from '../../context/GameContext';\nimport {     \n    setMessage,\n    setOpponent,\n    setOpponentColour,\n    setOpponentMoves,\n    setPlayer,\n    setPlayerColour,\n    types, } from '../../context/actions';\nimport { getGameOverState } from '../../functions';\nimport  GameOver from '../../components/gameover';\nimport UserForm from '../../components/userform';\nimport io from 'socket.io-client';\n\n\n\n\n\nconst socket = io('localhost:5000', {\n    transports: ['websocket']\n});\nconst FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n// checkmate for testing game over screen\n// const FEN = 'rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3';\n\nconst Game = ()=> {\n    const[fen, setFen] = useState(FEN);\n    const {current: chess} = useRef(new Chess(fen));\n    const [board,setBoard] = useState(createBoard(fen));\n    const {gameOver} = useContext(GameContext);\n    const { possibleMoves, dispatch } = useContext(GameContext);\n\n    // useEffect(() => {\n    //     axios.get(serverURL).then((response) => {\n    //         setString(response.data)\n    //     });\n    // });\n \n    // every time a change is made to the state of the game, the board is updated with the new fen\n    useEffect(() =>{\n        setBoard(createBoard(fen));\n    }, [fen]);\n\n\n        \n    // listening for events from the server\n\n    useEffect(() => {\n        socket.on('connect_error', (error) => {\n            console.log('Websocket connection error: ', error)\n        });\n\n            socket.emit('join', { name: 'Frank', gameID: '20' }, ({ error, name, colour }) => {\n                if (error){\n                    console.log(error)\n                }\n                dispatch(setPlayer(name));\n                dispatch(setPlayerColour(colour))\n            });\n\n\n        socket.on('welcome', ({ message, opponent }) => {\n            dispatch(setMessage(message));\n            dispatch(setOpponent(opponent));\n        });\n        socket.on('opponentJoin', ({ message, opponent }) => {\n            dispatch(setMessage(message));\n            dispatch(setOpponent(opponent));\n            dispatch(setOpponentColour(opponent.colour));\n        });\n        socket.on('opponentLeft', ({ message }) => {\n            console.log(message)\n        });\n    \n        socket.on('opponentMove', ({ from, to }) => {\n            chess.move({ from, to });\n            setFen(chess.fen());\n            dispatch(setMessage('Your Turn'));\n            dispatch(setOpponentMoves([from, to]));\n        });\n        socket.on('message',({ message })=> {\n            console.log(message)\n        });\n\n}, [chess, dispatch]);\n\n\n    // will detect if a player is in check\n    useEffect(() =>{\n        const [gameOver, status] = getGameOverState(chess);\n        if (gameOver) {\n            dispatch({ type: types.GAME_OVER, status, player: chess.turn() });\n            return\n        }\n        dispatch({\n            type: types.SET_TURN,\n            player: chess.turn(),\n            check: chess.isCheck(),\n        });\n    }, [fen, dispatch, chess]);\n\n    /** move handling */\n    const fromPos = useRef(); /** follow setFromPos to the piece component */\n\n    // share move set with components\n\n    const makeMove = (pos) =>{\n        const from = fromPos.current;\n        const to = pos;\n\n        var validMove = possibleMoves.includes(to)\n         if (validMove){\n            chess.move({ from, to });\n            // socket.emit('move', { gameID: '20', from, to}) // send moves to the other player through the websocket\n            dispatch({ type: types.CLEAR_POSSIBLE_MOVES}) // unhighlight possible moves\n            setFen(chess.fen()); // update the fen with the new move/piece positions\n        }\n    };\n\n    // this is called once a piece is dragged\n    const setFromPos = (pos) => {\n        fromPos.current = pos\n        dispatch({\n            type:types.SET_POSSIBLE_MOVES,\n            moves: chess.moves({ square: pos }) // send the possible moves from the currently selected position to highlight\n        })\n    };\n\n    // if (gameOver) {\n    //     return <GameOver />\n    // };\n\n    return (\n            <div className=\"game\">\n            <Board cells = {board} makeMove={makeMove} setFromPos={setFromPos}/>\n            </div>\n    );\n\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}