{"ast":null,"code":"import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = moves => {\n  return moves.map(move => {\n    const n = move.length;\n    var start = 2;\n    if (move.substring(n) === '+') {\n      start = 3;\n    }\n    return move.substring(n - start);\n  });\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_POSSIBLE_MOVES:\n      // highlight possible cells to move to\n      return {\n        ...state,\n        possibleMoves: getPositions(action.moves)\n      };\n    case types.CLEAR_POSSIBLE_MOVES:\n      // unhighlight cells\n      return {\n        ...state,\n        possibleMoves: []\n      };\n    case types.SET_TURN:\n      return {\n        ...state,\n        turn: action.player,\n        check: action.check\n      };\n    default:\n      return state;\n  }\n};\n_c = GameReducer;\nexport default GameReducer;\nvar _c;\n$RefreshReg$(_c, \"GameReducer\");","map":{"version":3,"names":["types","getPositions","moves","map","move","n","length","start","substring","GameReducer","state","action","type","SET_POSSIBLE_MOVES","possibleMoves","CLEAR_POSSIBLE_MOVES","SET_TURN","turn","player","check","_c","$RefreshReg$"],"sources":["/home/cevdet/go-projects/react-chess/chess-app/src/context/GameReducer.js"],"sourcesContent":["import { types } from './actions';\n\n// returns an array of possible moves \nconst getPositions = (moves) => {\n    return moves.map((move) => {\n        const n = move.length;\n        var start = 2;\n        if (move.substring(n) === '+'){\n            start = 3\n        }\n        return move.substring(n-start)\n    });\n};\n\n// takes in the previous game state and action to apply to the state, then returns a new updated state based on the action\nconst GameReducer = (state, action) =>{\n    switch (action.type) {\n        case types.SET_POSSIBLE_MOVES: // highlight possible cells to move to\n            return {\n                ...state,\n                possibleMoves: getPositions(action.moves),\n            };\n            case types.CLEAR_POSSIBLE_MOVES: // unhighlight cells\n                return {\n                    ...state,\n                    possibleMoves: [],\n                };\n            case types.SET_TURN:\n                return {\n                    ...state,\n                    turn: action.player,\n                    check: action.check,\n                };\n            default:\n                return state;\n    }\n};\n\nexport default GameReducer;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;;AAEjC;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC5B,OAAOA,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;IACvB,MAAMC,CAAC,GAAGD,IAAI,CAACE,MAAM;IACrB,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIH,IAAI,CAACI,SAAS,CAACH,CAAC,CAAC,KAAK,GAAG,EAAC;MAC1BE,KAAK,GAAG,CAAC;IACb;IACA,OAAOH,IAAI,CAACI,SAAS,CAACH,CAAC,GAACE,KAAK,CAAC;EAClC,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAI;EAClC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKZ,KAAK,CAACa,kBAAkB;MAAE;MAC3B,OAAO;QACH,GAAGH,KAAK;QACRI,aAAa,EAAEb,YAAY,CAACU,MAAM,CAACT,KAAK;MAC5C,CAAC;IACD,KAAKF,KAAK,CAACe,oBAAoB;MAAE;MAC7B,OAAO;QACH,GAAGL,KAAK;QACRI,aAAa,EAAE;MACnB,CAAC;IACL,KAAKd,KAAK,CAACgB,QAAQ;MACf,OAAO;QACH,GAAGN,KAAK;QACRO,IAAI,EAAEN,MAAM,CAACO,MAAM;QACnBC,KAAK,EAAER,MAAM,CAACQ;MAClB,CAAC;IACL;MACI,OAAOT,KAAK;EACxB;AACJ,CAAC;AAACU,EAAA,GArBIX,WAAW;AAuBjB,eAAeA,WAAW;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}